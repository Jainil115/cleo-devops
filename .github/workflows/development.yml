name: Docker Image CI

on:
  push:
    branches: ["development"]
  pull_request:
    branches: ["development"]
  workflow_dispatch:
env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: "nextapp"
  ECS_SERVICE: "dev-ecs-service"
  ECS_CLUSTER: "dev-ecs-cluster"
  ECS_TASK_DEFINITION: dev-tf.json
  CONTAINER_NAME: nextapp
  # POSTGRES_USER: ${{secrets.POSTGRES_USERNAME}}
  # POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
  # POSTGRES_DB: ${{secrets.POSTGRES_DB}}
  # POSTGRES_HOST: ${{secrets.POSTGRES_HOST}}
  # POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
  HOME: "~/"
  NEXT_PORT: 3000
  SERVER_PORT: 3000

  AUTH0_SECRET: ${{secrets.AUTH0_SECRET}}
  AUTH0_ISSUER_BASE_URL: ${{secrets.AUTH0_ISSUER_BASE_URL}}
  AUTH0_CLIENT_ID: ${{secrets.AUTH0_CLIENT_ID}}
  AUTH0_CLIENT_SECRET: ${{secrets.AUTH0_CLIENT_SECRET}}
  # LOCAL_DATABASE_URL: ${{secrets.LOCAL_DATABASE_URL}}
  DATABASE_URL: ${{secrets.DATABASE_URL}}
  INFRA_REPO: "cleo-env"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Infra Checkout
        uses: actions/checkout@v4
        with:
          repository: "Jainil115/${{ env.INFRA_REPO }}"
          ref: "dev"
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Output
        run: |
          terraform init
          echo "AUTH0_BASE_URL=https://dev.jainilpatel.tech" >> $GITHUB_ENV
          echo $(terraform output lb_dns_name)

      - name: Github Checkout
        uses: actions/checkout@v3
        with:
          ref: "development"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          AUTH0_BASE_URL: ${{ env.AUTH0_BASE_URL }}
        run: |
          chmod +x ./set_env.sh
          ./set_env.sh
          echo "${{env.AUTH0_BASE_URL}}"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
